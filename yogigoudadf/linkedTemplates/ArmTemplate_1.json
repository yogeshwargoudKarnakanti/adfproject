{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "yogigoudadf"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DataFlowCasesAndDeaths')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_raw_cases_and_deaths",
								"type": "DatasetReference"
							},
							"name": "CasesandDeathsSource"
						},
						{
							"dataset": {
								"referenceName": "ds_country_lookup",
								"type": "DatasetReference"
							},
							"name": "countryLookup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_processed_CasesandDeaths",
								"type": "DatasetReference"
							},
							"name": "CaseandDeaths"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "selectRequiredColumns"
						},
						{
							"name": "pivotcounts"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "selectRequiredColumn"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          country_code as string,",
						"          continent as string,",
						"          population as string,",
						"          indicator as string,",
						"          daily_count as integer,",
						"          date as string,",
						"          rate_14_day as string,",
						"          source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 2000,",
						"     ignoreNoFilesFound: false) ~> CasesandDeathsSource",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> countryLookup",
						"CasesandDeathsSource filter(continent=='Europe' && not(isNull(country_code))) ~> filter1",
						"filter1 select(mapColumn(",
						"          country,",
						"          country_code,",
						"          population,",
						"          indicator,",
						"          daily_count,",
						"          source,",
						"          each(match(name=='date'),",
						"               'reported'+'_date' = $$)",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> selectRequiredColumns",
						"selectRequiredColumns pivot(groupBy(population,",
						"          country_code,",
						"          country,",
						"          source,",
						"          reported_date,",
						"          country_special = country+country_code),",
						"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
						"     count = sum(daily_count),",
						"     columnNaming: '$V_$N',",
						"     lateral: true) ~> pivotcounts",
						"pivotcounts, countryLookup lookup(pivotcounts@country == countryLookup@country,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 select(mapColumn(",
						"          population = pivotcounts@population,",
						"          country = pivotcounts@country,",
						"          {confirmed cases_count},",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          country_code,",
						"          deaths_count,",
						"          source,",
						"          reported_date,",
						"          country_special",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRequiredColumn",
						"selectRequiredColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CaseandDeaths"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowHospitalAdmissionData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_Hospital_Admission_Data",
								"type": "DatasetReference"
							},
							"name": "importDataFromdsHospitalAdmissionData"
						},
						{
							"dataset": {
								"referenceName": "ds_country_lookup",
								"type": "DatasetReference"
							},
							"name": "sourceCountryLookUp"
						},
						{
							"dataset": {
								"referenceName": "DimDate",
								"type": "DatasetReference"
							},
							"name": "SourceDimDate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_WeeklyData",
								"type": "DatasetReference"
							},
							"name": "sinkWeeklyData"
						},
						{
							"dataset": {
								"referenceName": "ds_DailyData",
								"type": "DatasetReference"
							},
							"name": "sinkDailyData"
						}
					],
					"transformations": [
						{
							"name": "selectRequiresColumns"
						},
						{
							"name": "LookUp"
						},
						{
							"name": "SelectRequColFromLookup"
						},
						{
							"name": "DailyAndWeeklyOccupency"
						},
						{
							"name": "DerivedEcdcYearWeek"
						},
						{
							"name": "AggDimDate"
						},
						{
							"name": "joinWithDate"
						},
						{
							"name": "weeklyIcuAndAdmissioncounts"
						},
						{
							"name": "dailyAdmissionAndIcuCount"
						},
						{
							"name": "sortWeekly"
						},
						{
							"name": "sortDaily"
						},
						{
							"name": "selectWeekly"
						},
						{
							"name": "selectDaily"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          indicator as string,",
						"          date as date,",
						"          year_week as string,",
						"          value as double,",
						"          source as string,",
						"          url as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> importDataFromdsHospitalAdmissionData",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceCountryLookUp",
						"source(output(",
						"          date_key as string,",
						"          date as string,",
						"          year as string,",
						"          month as string,",
						"          day as string,",
						"          day_name as string,",
						"          day_of_year as string,",
						"          week_of_month as string,",
						"          week_of_year as string,",
						"          month_name as string,",
						"          year_month as string,",
						"          year_week as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SourceDimDate",
						"importDataFromdsHospitalAdmissionData select(mapColumn(",
						"          country,",
						"          indicator,",
						"          reported_date = date,",
						"          reported_year_week = year_week,",
						"          value,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRequiresColumns",
						"selectRequiresColumns, sourceCountryLookUp lookup(selectRequiresColumns@country == sourceCountryLookUp@country,",
						"     multiple: true,",
						"     broadcast: 'auto')~> LookUp",
						"LookUp select(mapColumn(",
						"          country = selectRequiresColumns@country,",
						"          indicator,",
						"          reported_date,",
						"          reported_year_week,",
						"          value,",
						"          source,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRequColFromLookup",
						"SelectRequColFromLookup split(indicator=='Weekly new hospital admissions per 100k'||indicator=='Weekly new ICU admissions per 100k',",
						"     indicator=='Daily ICU occupancy'||indicator=='Daily hospital occupancy',",
						"     disjoint: false) ~> DailyAndWeeklyOccupency@(weekly, Daily)",
						"SourceDimDate derive(ecdcyearweek = year +'-W' + lpad(week_of_year,2,'0')) ~> DerivedEcdcYearWeek",
						"DerivedEcdcYearWeek aggregate(groupBy(ecdcyearweek),",
						"     week_startDate = min(date),",
						"          week_endDate = max(date)) ~> AggDimDate",
						"DailyAndWeeklyOccupency@weekly, AggDimDate join(reported_year_week == ecdcyearweek,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinWithDate",
						"DailyAndWeeklyOccupency@weekly pivot(groupBy(country,",
						"          reported_year_week,",
						"          source,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population),",
						"     pivotBy(indicator, ['weeklyHospitalAdmission', 'weeklyIcuAmission']),",
						"     count = sum(value),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> weeklyIcuAndAdmissioncounts",
						"DailyAndWeeklyOccupency@Daily pivot(groupBy(country,",
						"          reported_date,",
						"          source,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population),",
						"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
						"     count = sum(value),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> dailyAdmissionAndIcuCount",
						"weeklyIcuAndAdmissioncounts sort(asc(country, true),",
						"     desc(reported_year_week, true),",
						"     partitionLevel: true) ~> sortWeekly",
						"dailyAdmissionAndIcuCount sort(asc(country, true),",
						"     desc(reported_date, true),",
						"     partitionLevel: true) ~> sortDaily",
						"sortWeekly select(mapColumn(",
						"          country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          reported_year_week,",
						"          population,",
						"          countweeklyHospitalAdmission,",
						"          countweeklyIcuAmission,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWeekly",
						"sortDaily select(mapColumn(",
						"          country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          reported_date,",
						"          population,",
						"          {countDaily hospital occupancy},",
						"          {countDaily ICU occupancy},",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectDaily",
						"selectWeekly sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          population as string,",
						"          country as string,",
						"          {confirmed cases_count} as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          country_code as string,",
						"          deaths_count as string,",
						"          source as string,",
						"          reported_date as string,",
						"          country_special as string",
						"     ),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkWeeklyData",
						"selectDaily sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          population as string,",
						"          country as string,",
						"          {confirmed cases_count} as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          country_code as string,",
						"          deaths_count as string,",
						"          source as string,",
						"          reported_date as string,",
						"          country_special as string",
						"     ),",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkDailyData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_process_casesandDeaths')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataFlowCasesAndDeaths",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CasesandDeathsSource": {},
									"countryLookup": {},
									"CaseandDeaths": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DataFlowCasesAndDeaths')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_with_dataset')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dftransformed_cases_and_deaths",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DataFlowCasesAndDeaths",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CasesandDeathsSource": {},
									"countryLookup": {},
									"CaseandDeaths": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DataFlowCasesAndDeaths')]"
			]
		}
	]
}